// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_account is a generated GoMock package.
package mock_account

import (
	account "bank-api/account"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIAccountRepository is a mock of IAccountRepository interface
type MockIAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountRepositoryMockRecorder
}

// MockIAccountRepositoryMockRecorder is the mock recorder for MockIAccountRepository
type MockIAccountRepositoryMockRecorder struct {
	mock *MockIAccountRepository
}

// NewMockIAccountRepository creates a new mock instance
func NewMockIAccountRepository(ctrl *gomock.Controller) *MockIAccountRepository {
	mock := &MockIAccountRepository{ctrl: ctrl}
	mock.recorder = &MockIAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAccountRepository) EXPECT() *MockIAccountRepositoryMockRecorder {
	return m.recorder
}

// NewAccount mocks base method
func (m *MockIAccountRepository) NewAccount(newAccount account.Account) (*account.Account, []error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAccount", newAccount)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].([]error)
	return ret0, ret1
}

// NewAccount indicates an expected call of NewAccount
func (mr *MockIAccountRepositoryMockRecorder) NewAccount(newAccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAccount", reflect.TypeOf((*MockIAccountRepository)(nil).NewAccount), newAccount)
}

// FindByID mocks base method
func (m *MockIAccountRepository) FindByID(id string) (*account.Account, []error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].([]error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockIAccountRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIAccountRepository)(nil).FindByID), id)
}

// FindByDocument mocks base method
func (m *MockIAccountRepository) FindByDocument(documentNumber string) (*account.Account, []error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByDocument", documentNumber)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].([]error)
	return ret0, ret1
}

// FindByDocument indicates an expected call of FindByDocument
func (mr *MockIAccountRepositoryMockRecorder) FindByDocument(documentNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDocument", reflect.TypeOf((*MockIAccountRepository)(nil).FindByDocument), documentNumber)
}

// UpdateLimit mocks base method
func (m *MockIAccountRepository) UpdateLimit(accountToUpdate account.Account) (*account.Account, []error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLimit", accountToUpdate)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].([]error)
	return ret0, ret1
}

// UpdateLimit indicates an expected call of UpdateLimit
func (mr *MockIAccountRepositoryMockRecorder) UpdateLimit(accountToUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLimit", reflect.TypeOf((*MockIAccountRepository)(nil).UpdateLimit), accountToUpdate)
}
