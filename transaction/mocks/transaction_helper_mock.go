// Code generated by MockGen. DO NOT EDIT.
// Source: ./transaction/helper.go

// Package mock_transaction is a generated GoMock package.
package mock_transaction

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIHelper is a mock of IHelper interface
type MockIHelper struct {
	ctrl     *gomock.Controller
	recorder *MockIHelperMockRecorder
}

// MockIHelperMockRecorder is the mock recorder for MockIHelper
type MockIHelperMockRecorder struct {
	mock *MockIHelper
}

// NewMockIHelper creates a new mock instance
func NewMockIHelper(ctrl *gomock.Controller) *MockIHelper {
	mock := &MockIHelper{ctrl: ctrl}
	mock.recorder = &MockIHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIHelper) EXPECT() *MockIHelperMockRecorder {
	return m.recorder
}

// AccountValidator mocks base method
func (m *MockIHelper) AccountValidator(accountId string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountValidator", accountId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AccountValidator indicates an expected call of AccountValidator
func (mr *MockIHelperMockRecorder) AccountValidator(accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountValidator", reflect.TypeOf((*MockIHelper)(nil).AccountValidator), accountId)
}

// TransformAmount mocks base method
func (m *MockIHelper) TransformAmount(amount float64, isCredit bool) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransformAmount", amount, isCredit)
	ret0, _ := ret[0].(float64)
	return ret0
}

// TransformAmount indicates an expected call of TransformAmount
func (mr *MockIHelperMockRecorder) TransformAmount(amount, isCredit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransformAmount", reflect.TypeOf((*MockIHelper)(nil).TransformAmount), amount, isCredit)
}
