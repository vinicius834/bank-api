// Code generated by MockGen. DO NOT EDIT.
// Source: ./transaction/repository.go

// Package mock_transaction is a generated GoMock package.
package mock_transaction

import (
	transaction "bank-api/transaction"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockITransactionRepository is a mock of ITransactionRepository interface
type MockITransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionRepositoryMockRecorder
}

// MockITransactionRepositoryMockRecorder is the mock recorder for MockITransactionRepository
type MockITransactionRepositoryMockRecorder struct {
	mock *MockITransactionRepository
}

// NewMockITransactionRepository creates a new mock instance
func NewMockITransactionRepository(ctrl *gomock.Controller) *MockITransactionRepository {
	mock := &MockITransactionRepository{ctrl: ctrl}
	mock.recorder = &MockITransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockITransactionRepository) EXPECT() *MockITransactionRepositoryMockRecorder {
	return m.recorder
}

// NewTransaction mocks base method
func (m *MockITransactionRepository) NewTransaction(newTransaction transaction.Transaction) (*transaction.Transaction, []error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransaction", newTransaction)
	ret0, _ := ret[0].(*transaction.Transaction)
	ret1, _ := ret[1].([]error)
	return ret0, ret1
}

// NewTransaction indicates an expected call of NewTransaction
func (mr *MockITransactionRepositoryMockRecorder) NewTransaction(newTransaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransaction", reflect.TypeOf((*MockITransactionRepository)(nil).NewTransaction), newTransaction)
}

// FindOperationTypeById mocks base method
func (m *MockITransactionRepository) FindOperationTypeById(id string) (*transaction.OperationType, []error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOperationTypeById", id)
	ret0, _ := ret[0].(*transaction.OperationType)
	ret1, _ := ret[1].([]error)
	return ret0, ret1
}

// FindOperationTypeById indicates an expected call of FindOperationTypeById
func (mr *MockITransactionRepositoryMockRecorder) FindOperationTypeById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOperationTypeById", reflect.TypeOf((*MockITransactionRepository)(nil).FindOperationTypeById), id)
}

// NewOperationType mocks base method
func (m *MockITransactionRepository) NewOperationType(newOperationType transaction.OperationType) (*transaction.OperationType, []error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewOperationType", newOperationType)
	ret0, _ := ret[0].(*transaction.OperationType)
	ret1, _ := ret[1].([]error)
	return ret0, ret1
}

// NewOperationType indicates an expected call of NewOperationType
func (mr *MockITransactionRepositoryMockRecorder) NewOperationType(newOperationType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewOperationType", reflect.TypeOf((*MockITransactionRepository)(nil).NewOperationType), newOperationType)
}
